/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { FundMe, FundMeInterface } from "../../contracts/FundMe";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "MIN_USD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "addressToAmountFunded",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "funders",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "i_owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c610d1d61006d6000396000818161026f01526104c80152610d1d6000f3fe6080604052600436106100595760003560e01c8063213dbea2146100725780633ccfd60b1461009d5780633e47d6f3146100b4578063b60d4288146100f1578063dba6335f146100fb578063dc0d3dff1461012657610068565b3661006857610066610163565b005b610070610163565b005b34801561007e57600080fd5b50610087610260565b60405161009491906106db565b60405180910390f35b3480156100a957600080fd5b506100b261026d565b005b3480156100c057600080fd5b506100db60048036038101906100d69190610759565b6104ae565b6040516100e891906106db565b60405180910390f35b6100f9610163565b005b34801561010757600080fd5b506101106104c6565b60405161011d9190610795565b60405180910390f35b34801561013257600080fd5b5061014d600480360381019061014891906107dc565b6104ea565b60405161015a9190610795565b60405180910390f35b6802b5e3af16b188000061017634610529565b10156101b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ae90610866565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102f3576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561039e57600080828154811061031857610317610886565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610396906108e4565b9150506102f6565b50600067ffffffffffffffff8111156103ba576103b961092d565b5b6040519080825280602002602001820160405280156103e85781602001602082028036833780820191505090505b50600090805190602001906103fe92919061061b565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104259061098d565b60006040518083038185875af1925050503d8060008114610462576040519150601f19603f3d011682016040523d82523d6000602084013e610467565b606091505b50509050806104ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a2906109ee565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081815481106104fa57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610534610563565b90506000670de0b6b3a7640000848361054d9190610a0e565b6105579190610a97565b90508092505050919050565b600080738a753747a1fa494ec906ce90e9f37563a8af630e905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156105c557600080fd5b505afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd9190610b55565b5050509150506402540be400816106149190610bd0565b9250505090565b828054828255906000526020600020908101928215610694579160200282015b828111156106935782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061063b565b5b5090506106a191906106a5565b5090565b5b808211156106be5760008160009055506001016106a6565b5090565b6000819050919050565b6106d5816106c2565b82525050565b60006020820190506106f060008301846106cc565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610726826106fb565b9050919050565b6107368161071b565b811461074157600080fd5b50565b6000813590506107538161072d565b92915050565b60006020828403121561076f5761076e6106f6565b5b600061077d84828501610744565b91505092915050565b61078f8161071b565b82525050565b60006020820190506107aa6000830184610786565b92915050565b6107b9816106c2565b81146107c457600080fd5b50565b6000813590506107d6816107b0565b92915050565b6000602082840312156107f2576107f16106f6565b5b6000610800848285016107c7565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610850601283610809565b915061085b8261081a565b602082019050919050565b6000602082019050818103600083015261087f81610843565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108ef826106c2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610922576109216108b5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b600061097760008361095c565b915061098282610967565b600082019050919050565b60006109988261096a565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b60006109d8600b83610809565b91506109e3826109a2565b602082019050919050565b60006020820190508181036000830152610a07816109cb565b9050919050565b6000610a19826106c2565b9150610a24836106c2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a5d57610a5c6108b5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610aa2826106c2565b9150610aad836106c2565b925082610abd57610abc610a68565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ae781610ac8565b8114610af257600080fd5b50565b600081519050610b0481610ade565b92915050565b6000819050919050565b610b1d81610b0a565b8114610b2857600080fd5b50565b600081519050610b3a81610b14565b92915050565b600081519050610b4f816107b0565b92915050565b600080600080600060a08688031215610b7157610b706106f6565b5b6000610b7f88828901610af5565b9550506020610b9088828901610b2b565b9450506040610ba188828901610b40565b9350506060610bb288828901610b40565b9250506080610bc388828901610af5565b9150509295509295909350565b6000610bdb82610b0a565b9150610be683610b0a565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610c2557610c246108b5565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610c6257610c616108b5565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610c9f57610c9e6108b5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610cdc57610cdb6108b5565b5b82820290509291505056fea2646970667358221220749e7ead1a7b29fba85afe0ad94952e7beedd56a63982d77631856b9cb0f9f2564736f6c63430008080033";

type FundMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundMe__factory extends ContractFactory {
  constructor(...args: FundMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FundMe> {
    return super.deploy(overrides || {}) as Promise<FundMe>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FundMe {
    return super.attach(address) as FundMe;
  }
  override connect(signer: Signer): FundMe__factory {
    return super.connect(signer) as FundMe__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new utils.Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundMe {
    return new Contract(address, _abi, signerOrProvider) as FundMe;
  }
}
