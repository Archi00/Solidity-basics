/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { FundMe, FundMeInterface } from "../../contracts/FundMe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeedAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "MIN_USD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "addressToAmountFunded",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "funders",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "i_owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610f7e380380610f7e83398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610e19610165600039600081816102e101526105600152610e196000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b8063213dbea21461008d5780633ccfd60b146100b85780633e47d6f3146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b6040516100af919061075d565b60405180910390f35b3480156100c457600080fd5b506100cd6102df565b005b3480156100db57600080fd5b506100f660048036038101906100f191906107db565b610520565b604051610103919061075d565b60405180910390f35b34801561011857600080fd5b50610121610538565b60405161012e9190610867565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055e565b6040516101639190610891565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108d8565b610582565b6040516101a09190610891565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c190919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610962565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610365576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041057600080828154811061038a57610389610982565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610408906109e0565b915050610368565b50600067ffffffffffffffff81111561042c5761042b610a29565b5b60405190808252806020026020018201604052801561045a5781602001602082028036833780820191505090505b506000908051906020019061047092919061069d565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049790610a89565b60006040518083038185875af1925050503d80600081146104d4576040519150601f19603f3d011682016040523d82523d6000602084013e6104d9565b606091505b505090508061051d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051490610aea565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105cd836105fd565b90506000670de0b6b3a764000085836105e69190610b0a565b6105f09190610b93565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064657600080fd5b505afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190610c51565b5050509150506402540be400816106959190610ccc565b915050919050565b828054828255906000526020600020908101928215610716579160200282015b828111156107155782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106bd565b5b5090506107239190610727565b5090565b5b80821115610740576000816000905550600101610728565b5090565b6000819050919050565b61075781610744565b82525050565b6000602082019050610772600083018461074e565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107a88261077d565b9050919050565b6107b88161079d565b81146107c357600080fd5b50565b6000813590506107d5816107af565b92915050565b6000602082840312156107f1576107f0610778565b5b60006107ff848285016107c6565b91505092915050565b6000819050919050565b600061082d6108286108238461077d565b610808565b61077d565b9050919050565b600061083f82610812565b9050919050565b600061085182610834565b9050919050565b61086181610846565b82525050565b600060208201905061087c6000830184610858565b92915050565b61088b8161079d565b82525050565b60006020820190506108a66000830184610882565b92915050565b6108b581610744565b81146108c057600080fd5b50565b6000813590506108d2816108ac565b92915050565b6000602082840312156108ee576108ed610778565b5b60006108fc848285016108c3565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b600061094c601283610905565b915061095782610916565b602082019050919050565b6000602082019050818103600083015261097b8161093f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109eb82610744565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1e57610a1d6109b1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a73600083610a58565b9150610a7e82610a63565b600082019050919050565b6000610a9482610a66565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ad4600b83610905565b9150610adf82610a9e565b602082019050919050565b60006020820190508181036000830152610b0381610ac7565b9050919050565b6000610b1582610744565b9150610b2083610744565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b5957610b586109b1565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b9e82610744565b9150610ba983610744565b925082610bb957610bb8610b64565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610be381610bc4565b8114610bee57600080fd5b50565b600081519050610c0081610bda565b92915050565b6000819050919050565b610c1981610c06565b8114610c2457600080fd5b50565b600081519050610c3681610c10565b92915050565b600081519050610c4b816108ac565b92915050565b600080600080600060a08688031215610c6d57610c6c610778565b5b6000610c7b88828901610bf1565b9550506020610c8c88828901610c27565b9450506040610c9d88828901610c3c565b9350506060610cae88828901610c3c565b9250506080610cbf88828901610bf1565b9150509295509295909350565b6000610cd782610c06565b9150610ce283610c06565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d2157610d206109b1565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d5e57610d5d6109b1565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d9b57610d9a6109b1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dd857610dd76109b1565b5b82820290509291505056fea26469706673582212206990cc87cd748592f678285adc878306ed3bacb9a7b7596ae053b2414d29501764736f6c63430008080033";

type FundMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundMe__factory extends ContractFactory {
  constructor(...args: FundMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    priceFeedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FundMe> {
    return super.deploy(priceFeedAddress, overrides || {}) as Promise<FundMe>;
  }
  override getDeployTransaction(
    priceFeedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(priceFeedAddress, overrides || {});
  }
  override attach(address: string): FundMe {
    return super.attach(address) as FundMe;
  }
  override connect(signer: Signer): FundMe__factory {
    return super.connect(signer) as FundMe__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new utils.Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundMe {
    return new Contract(address, _abi, signerOrProvider) as FundMe;
  }
}
