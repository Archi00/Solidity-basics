/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { FundMe, FundMeInterface } from "../../contracts/FundMe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FundMe__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "cheaperWithdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "s_addressToAmountFunded",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_funders",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_priceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620011e1380380620011e1833981810160405281019062000037919062000120565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6110626200017f60003960008181610280015281816105d9015261081701526110626000f3fe60806040526004361061007b5760003560e01c806354861af71161004e57806354861af71461011d578063b60d42881461015a578063be2693f014610164578063e39782401461016e5761007b565b80630d8e6e2c146100805780630ec3b027146100ab5780631bf6132d146100d65780633ccfd60b14610113575b600080fd5b34801561008c57600080fd5b50610095610199565b6040516100a291906109d5565b60405180910390f35b3480156100b757600080fd5b506100c0610240565b6040516100cd9190610a6f565b60405180910390f35b3480156100e257600080fd5b506100fd60048036038101906100f89190610acd565b610266565b60405161010a91906109d5565b60405180910390f35b61011b61027e565b005b34801561012957600080fd5b50610144600480360381019061013f9190610b26565b610458565b6040516101519190610b62565b60405180910390f35b610162610497565b005b61016c6105d7565b005b34801561017a57600080fd5b50610183610815565b6040516101909190610b62565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561020357600080fd5b505afa158015610217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023b9190610b92565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610303576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610349573d6000803e3d6000fd5b5060005b6001805490508110156103f5576000600182815481106103705761036f610bbf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103ed90610c1d565b91505061034d565b50600067ffffffffffffffff81111561041157610410610c66565b5b60405190808252806020026020018201604052801561043f5781602001602082028036833780820191505090505b5060019080519060200190610455929190610915565b50565b6001818154811061046857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006802b5e3af16b18800009050806104db600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461083990919063ffffffff16565b101561051c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051390610cf2565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461056a9190610d12565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461065c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156106a2573d6000803e3d6000fd5b506000600180548060200260200160405190810160405280929190818152602001828054801561072757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106dd575b5050505050905060005b81518110156107b157600082828151811061074f5761074e610bbf565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107a990610c1d565b915050610731565b50600067ffffffffffffffff8111156107cd576107cc610c66565b5b6040519080825280602002602001820160405280156107fb5781602001602082028036833780820191505090505b5060019080519060200190610811929190610915565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061084583610875565b90506000670de0b6b3a7640000858361085e9190610d68565b6108689190610df1565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108be57600080fd5b505afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190610e9a565b5050509150506402540be4008161090d9190610f15565b915050919050565b82805482825590600052602060002090810192821561098e579160200282015b8281111561098d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610935565b5b50905061099b919061099f565b5090565b5b808211156109b85760008160009055506001016109a0565b5090565b6000819050919050565b6109cf816109bc565b82525050565b60006020820190506109ea60008301846109c6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a35610a30610a2b846109f0565b610a10565b6109f0565b9050919050565b6000610a4782610a1a565b9050919050565b6000610a5982610a3c565b9050919050565b610a6981610a4e565b82525050565b6000602082019050610a846000830184610a60565b92915050565b600080fd5b6000610a9a826109f0565b9050919050565b610aaa81610a8f565b8114610ab557600080fd5b50565b600081359050610ac781610aa1565b92915050565b600060208284031215610ae357610ae2610a8a565b5b6000610af184828501610ab8565b91505092915050565b610b03816109bc565b8114610b0e57600080fd5b50565b600081359050610b2081610afa565b92915050565b600060208284031215610b3c57610b3b610a8a565b5b6000610b4a84828501610b11565b91505092915050565b610b5c81610a8f565b82525050565b6000602082019050610b776000830184610b53565b92915050565b600081519050610b8c81610afa565b92915050565b600060208284031215610ba857610ba7610a8a565b5b6000610bb684828501610b7d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c28826109bc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c5b57610c5a610bee565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610cdc601b83610c95565b9150610ce782610ca6565b602082019050919050565b60006020820190508181036000830152610d0b81610ccf565b9050919050565b6000610d1d826109bc565b9150610d28836109bc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5d57610d5c610bee565b5b828201905092915050565b6000610d73826109bc565b9150610d7e836109bc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610db757610db6610bee565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dfc826109bc565b9150610e07836109bc565b925082610e1757610e16610dc2565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e4181610e22565b8114610e4c57600080fd5b50565b600081519050610e5e81610e38565b92915050565b6000819050919050565b610e7781610e64565b8114610e8257600080fd5b50565b600081519050610e9481610e6e565b92915050565b600080600080600060a08688031215610eb657610eb5610a8a565b5b6000610ec488828901610e4f565b9550506020610ed588828901610e85565b9450506040610ee688828901610b7d565b9350506060610ef788828901610b7d565b9250506080610f0888828901610e4f565b9150509295509295909350565b6000610f2082610e64565b9150610f2b83610e64565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f6a57610f69610bee565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610fa757610fa6610bee565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fe457610fe3610bee565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561102157611020610bee565b5b82820290509291505056fea264697066735822122042bd49c5c3987922fefbfc0bfae37dfc89e0f02c2b37e0fb18857f81e93a1a6e64736f6c63430008080033";

type FundMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundMe__factory extends ContractFactory {
  constructor(...args: FundMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FundMe> {
    return super.deploy(priceFeed, overrides || {}) as Promise<FundMe>;
  }
  override getDeployTransaction(
    priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(priceFeed, overrides || {});
  }
  override attach(address: string): FundMe {
    return super.attach(address) as FundMe;
  }
  override connect(signer: Signer): FundMe__factory {
    return super.connect(signer) as FundMe__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new utils.Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundMe {
    return new Contract(address, _abi, signerOrProvider) as FundMe;
  }
}
